query_data = [
    ("SELECT * FROM users", 1),
    ("SELECT id, name FROM users WHERE age > 30", 3),
    ("SELECT id FROM users JOIN orders ON users.id = orders.user_id", 4),
    ("UPDATE users SET name='John' WHERE id=1", 2),
    ("INSERT INTO users (id, name) VALUES (1, 'Alice')", 2),
    ("SELECT COUNT(*) FROM orders", 3),
    ("DELETE FROM users WHERE id=5", 2),
    ("SELECT DISTINCT name FROM users", 3),
    ("SELECT * FROM employees WHERE department = 'HR'", 3),
    ("SELECT u.id, u.name, o.total FROM users u JOIN orders o ON u.id = o.user_id", 4),
    ("SELECT * FROM products WHERE price > 100 ORDER BY price DESC", 4),
    ("SELECT city, AVG(salary) FROM employees GROUP BY city", 4),
    ("UPDATE employees SET salary = salary * 1.1 WHERE performance = 'good'", 3),
    ("SELECT name FROM customers WHERE EXISTS (SELECT * FROM orders WHERE orders.customer_id = customers.id)", 5),
    ("SELECT * FROM logs WHERE timestamp > NOW() - INTERVAL 1 DAY", 3),
    ("SELECT * FROM transactions WHERE status = 'FAILED' AND amount > 500", 4),
    ("SELECT name FROM users WHERE id IN (SELECT user_id FROM admins)", 5),
    ("SELECT name, SUM(sales) FROM sales GROUP BY name HAVING SUM(sales) > 1000", 4),
    ("SELECT id FROM orders WHERE user_id = 10 AND date BETWEEN '2023-01-01' AND '2023-12-31'", 4),
    ("INSERT INTO logs (event, created_at) VALUES ('LOGIN_ATTEMPT', NOW())", 2),
    ("UPDATE products SET stock = stock - 1 WHERE id = 101", 3),
    ("SELECT id, COUNT(*) FROM orders GROUP BY id", 4),
    ("DELETE FROM logs WHERE created_at < NOW() - INTERVAL 30 DAY", 3),
    ("SELECT user_id, COUNT(*) FROM login_attempts GROUP BY user_id HAVING COUNT(*) > 5", 4),
    ("SELECT * FROM reviews WHERE rating >= 4 ORDER BY created_at DESC", 3),
    ("SELECT u.name, SUM(o.total) FROM users u JOIN orders o ON u.id = o.user_id GROUP BY u.name", 5),
    ("SELECT product_id, AVG(rating) FROM reviews GROUP BY product_id HAVING COUNT(*) > 10", 5),
    ("SELECT category, COUNT(*) FROM products GROUP BY category", 3),
    ("SELECT * FROM customers WHERE last_purchase > NOW() - INTERVAL 6 MONTH", 3),
    ("UPDATE orders SET status = 'SHIPPED' WHERE id = 200", 2),
    ("SELECT email FROM users WHERE active = 1", 3),
    ("DELETE FROM users WHERE banned = 1", 2),
    ("SELECT id, username FROM admins", 3),
    ("INSERT INTO feedback (user_id, comment) VALUES (15, 'Great service!')", 2),
    ("UPDATE accounts SET balance = balance - 50 WHERE user_id = 5", 3),
    ("SELECT u.id, COUNT(o.id) FROM users u LEFT JOIN orders o ON u.id = o.user_id GROUP BY u.id", 4),
    ("SELECT * FROM orders WHERE total > 500", 3),
    ("SELECT id FROM invoices WHERE paid = 0", 3),
    ("SELECT order_id, status FROM orders WHERE date > '2024-01-01'", 3),
    ("SELECT customer_id, SUM(total) FROM transactions GROUP BY customer_id HAVING SUM(total) > 1000", 4),
    ("SELECT * FROM messages WHERE read = 0", 3),
    ("SELECT COUNT(*) FROM errors WHERE severity = 'CRITICAL'", 4),
    ("UPDATE users SET last_login = NOW() WHERE id = 5", 2),
    ("DELETE FROM transactions WHERE amount = 0", 2),
    ("SELECT * FROM inventory WHERE quantity < 10", 3),
    ("SELECT COUNT(DISTINCT user_id) FROM sessions", 4),
    ("SELECT employee_id, AVG(hours) FROM work_hours GROUP BY employee_id", 4),
    ("SELECT user_id FROM logins WHERE failed_attempts > 3", 3),
    ("SELECT username FROM users WHERE role = 'admin'", 3),
    ("INSERT INTO orders (user_id, total) VALUES (10, 250)", 2),
    ("UPDATE payments SET confirmed = 1 WHERE transaction_id = 1010", 3),
    ("SELECT id FROM tickets WHERE status = 'OPEN'", 3)
]

def get_training_data():
    return query_data
